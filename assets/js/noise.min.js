// Perlin Noise library - simplified version
(function(global){
  function Noise(seed) {
    this.grad3 = [[1,1,0],[-1,1,0],[1,-1,0],[-1,-1,0],[1,0,1],[-1,0,1],[1,0,-1],[-1,0,-1],[0,1,1],[0,-1,1],[0,1,-1],[0,-1,-1]];
    this.p = [];
    for (var i=0; i<256; i++) {
      this.p[i] = Math.floor(Math.random() * 256);
    }
    
    // To remove the need for index wrapping, double the permutation table length
    this.perm = [];
    for(var i=0; i<512; i++) {
      this.perm[i]=this.p[i & 255];
    }
  }
  
  Noise.prototype.dot = function(g, x, y, z) {
    return g[0]*x + g[1]*y + g[2]*z;
  };
  
  Noise.prototype.mix = function(a, b, t) {
    return (1.0-t)*a + t*b;
  };
  
  Noise.prototype.fade = function(t) {
    return t*t*t*(t*(t*6.0-15.0)+10.0);
  };
  
  Noise.prototype.noise = function(x, y, z) {
    // Find unit grid cell containing point
    var X = Math.floor(x) & 255;
    var Y = Math.floor(y) & 255;
    var Z = Math.floor(z) & 255;
    
    // Get relative xyz coordinates of point within that cell
    x -= Math.floor(x);
    y -= Math.floor(y);
    z -= Math.floor(z);
    
    // Compute fade curves for each of x, y, z
    var u = this.fade(x);
    var v = this.fade(y);
    var w = this.fade(z);
    
    // Hash coordinates of the 8 cube corners
    var A = this.perm[X  ]+Y, AA = this.perm[A]+Z, AB = this.perm[A+1]+Z;
    var B = this.perm[X+1]+Y, BA = this.perm[B]+Z, BB = this.perm[B+1]+Z;
    
    // Add blended results from 8 corners of cube
    var g1 = this.grad3[this.perm[AA  ] % 12];
    var g2 = this.grad3[this.perm[BA  ] % 12];
    var g3 = this.grad3[this.perm[AB  ] % 12];
    var g4 = this.grad3[this.perm[BB  ] % 12];
    var g5 = this.grad3[this.perm[AA+1] % 12];
    var g6 = this.grad3[this.perm[BA+1] % 12];
    var g7 = this.grad3[this.perm[AB+1] % 12];
    var g8 = this.grad3[this.perm[BB+1] % 12];
    
    return this.mix(
      this.mix(
        this.mix(this.dot(g1, x  , y  , z  ), this.dot(g2, x-1, y  , z  ), u),
        this.mix(this.dot(g3, x  , y-1, z  ), this.dot(g4, x-1, y-1, z  ), u),
        v
      ),
      this.mix(
        this.mix(this.dot(g5, x  , y  , z-1), this.dot(g6, x-1, y  , z-1), u),
        this.mix(this.dot(g7, x  , y-1, z-1), this.dot(g8, x-1, y-1, z-1), u),
        v
      ),
      w
    );
  };
  
  global.Noise = Noise;
})(window); 